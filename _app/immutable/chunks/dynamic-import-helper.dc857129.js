import{l as k,m as p,p as a,q as b}from"./scheduler.003e2365.js";import{p as i,t as v,b as w,d as g}from"./index.111c759f.js";function y(t,e){const s=e.token={};function c(r,u,h,m){if(e.token!==s)return;e.resolved=m;let n=e.ctx;h!==void 0&&(n=n.slice(),n[h]=m);const l=r&&(e.current=r)(n);let d=!1;e.block&&(e.blocks?e.blocks.forEach((o,_)=>{_!==u&&o&&(i(),v(o,1,1,()=>{e.blocks[_]===o&&(e.blocks[_]=null)}),w())}):e.block.d(1),l.c(),g(l,1),l.m(e.mount(),e.anchor),d=!0),e.block=l,e.blocks&&(e.blocks[u]=l),d&&b()}if(k(t)){const r=p();if(t.then(u=>{a(r),c(e.then,1,e.value,u),a(null)},u=>{if(a(r),c(e.catch,2,e.error,u),a(null),!e.hasCatch)throw u}),e.current!==e.pending)return c(e.pending,0),!0}else{if(e.current!==e.then)return c(e.then,1,e.value,t),!0;e.resolved=t}}function E(t,e,s){const c=e.slice(),{resolved:r}=t;t.current===t.then&&(c[t.value]=r),t.current===t.catch&&(c[t.error]=r),t.block.p(c,s)}const M=(t,e)=>{const s=t[e];return s?typeof s=="function"?s():Promise.resolve(s):new Promise((c,r)=>{(typeof queueMicrotask=="function"?queueMicrotask:setTimeout)(r.bind(null,new Error("Unknown variable dynamic import: "+e)))})};export{M as _,y as h,E as u};
